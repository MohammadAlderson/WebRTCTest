{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","createOffer","pc","state","console","log","then","sdp","JSON","stringify","setLocalDescription","catch","e","setRemoteDesc","desc","textAreaRef","value","setRemoteDescription","RTCSessionDescription","createAnswer","addCandidate","candidate","addIceCandidate","RTCIceCandidate","localVideoRef","createRef","remoteVideoRef","socket","RTCPeerConnection","iceServers","urls","window","location","origin","this","io","connect","on","success","onicecandidate","event","oniceconnectionstatechange","ontrack","remoteVideoref","srcObject","streams","navigator","mediaDevices","getUserMedia","video","audio","stream","getTracks","forEach","track","addTrack","className","style","display","flexDirection","marginBottom","alignItems","width","height","margin","backgroundColor","ref","autoPlay","justifyContent","onClick","React","PureComponent","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gSAuKeA,E,kDAlKb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IA+DRC,YAAc,WAAO,IACXC,EAAO,EAAKC,MAAZD,GACRE,QAAQC,IAAI,QAASH,GACrBA,EAAGD,cACAK,MAAK,SAACC,GACLH,QAAQC,IAAIG,KAAKC,UAAUF,IAC3BL,EAAGQ,oBAAoBH,MAExBI,OAAM,SAACC,GAAD,OAAOR,QAAQC,IAAIO,OAxEX,EA2EnBC,cAAgB,WAAO,IACbX,EAAO,EAAKC,MAAZD,GACFY,EAAON,KAAKC,UAAU,EAAKM,YAAYC,OAC7Cd,EAAGe,qBAAqB,IAAIC,sBAAsBJ,KA9EjC,EAiFnBK,aAAe,WAAO,IACZjB,EAAO,EAAKC,MAAZD,GACRE,QAAQC,IAAI,UACZH,EAAGiB,eACAb,MAAK,SAACC,GACLH,QAAQC,IAAI,mBAAoBG,KAAKC,UAAUF,IAC/CL,EAAGQ,oBAAoBH,MAExBI,OAAM,SAACC,GAAD,OAAOR,QAAQC,IAAIO,OAzFX,EA4FnBQ,aAAe,WAAO,IACZlB,EAAO,EAAKC,MAAZD,GACFmB,EAAYb,KAAKC,UAAU,EAAKM,YAAYC,OAClDd,EAAGoB,gBAAgB,IAAIC,gBAAgBF,KA7FvC,EAAKG,cAAgBC,sBACrB,EAAKC,eAAiBD,sBACtB,EAAKV,YAAcU,sBAJF,OAiBjB,EAAKE,OAAS,KACd,EAAKxB,MAAQ,CACXD,GAAI,IAAI0B,kBAdK,CACbC,WAAY,CAMV,CACEC,KAAM,oCAbK,E,gEAuBE,IAAD,OAClB1B,QAAQC,IAAI,cAAe0B,OAAOC,SAASC,QAC3CC,KAAKP,OAASQ,IAAGC,QAAQ,yBACzBhC,QAAQC,IAAI,cAAe6B,KAAKP,QAEhCO,KAAKP,OAAOU,GAAG,sBAAsB,SAACC,GACpClC,QAAQC,IAAIiC,MAGdlC,QAAQC,IAAI6B,KAAK/B,MAAMD,IATL,IAUVA,EAAOgC,KAAK/B,MAAZD,GACRA,EAAGqC,eAAiB,SAACC,GACfA,EAAMnB,WAAWjB,QAAQC,IAAIG,KAAKC,UAAU+B,EAAMnB,aAGxDnB,EAAGuC,2BAA6B,SAACD,GAAD,OAAWpC,QAAQC,IAAImC,IAGvDtC,EAAGwC,QAAU,SAACF,GAAD,OAAY,EAAKG,eAAeC,UAAYJ,EAAMK,QAAQ,IAiBvEC,UAAUC,aACPC,aAhBiB,CAAEC,OAAO,EAAMC,OAAO,IAiBvC5C,MAfa,SAAC6C,GACf,EAAK3B,cAAcoB,UAAYO,EAE/BA,EAAOC,YAAYC,SAAQ,SAACC,GAC1BlD,QAAQC,IAAIiD,GACZpD,EAAGqD,SAASD,EAAOH,SAWpBxC,OAPa,SAACC,GACfR,QAAQC,IAAIO,Q,+BA2CN,IAAD,OACP,OACE,yBAAK4C,UAAU,OACb,yBACEC,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,aAAc,KAE9D,yBACEH,MAAO,CACLC,QAAS,OACTC,cAAe,SACfE,WAAY,WAGd,uCACA,2BACEJ,MAAO,CACLK,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,gBAAiB,SAEnBC,IAAK,SAACA,GAAD,OAAU,EAAK1C,cAAgB0C,GACpCC,UAAQ,KAGZ,yBACEV,MAAO,CACLC,QAAS,OACTC,cAAe,SACfE,WAAY,WAGd,wCACA,2BACEJ,MAAO,CACLK,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,gBAAiB,SAEnBC,IAAK,SAACA,GAAD,OAAU,EAAKxC,eAAiBwC,GACrCC,UAAQ,MAId,yBACEV,MAAO,CACLK,MAAO,MACPJ,QAAS,OACTC,cAAe,MACfS,eAAgB,iBAGlB,4BAAQC,QAASnC,KAAKjC,aAAtB,SACA,4BAAQoE,QAASnC,KAAKf,cAAtB,UACA,8BAAU+C,IAAK,SAACA,GAAD,OAAU,EAAKnD,YAAcmD,KAC5C,4BAAQG,QAASnC,KAAKrB,eAAtB,mBACA,4BAAQwD,QAASnC,KAAKd,cAAtB,uB,GA5JQkD,IAAMC,eCQJC,QACW,cAA7BzC,OAAOC,SAASyC,UAEe,UAA7B1C,OAAOC,SAASyC,UAEhB1C,OAAOC,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBjC,WACrBA,UAAUkC,cAAcC,MACrB3E,MAAK,SAAA4E,GACJA,EAAaC,gBAEdxE,OAAM,SAAAyE,GACLhF,QAAQgF,MAAMA,EAAMC,c","file":"static/js/main.3f383380.chunk.js","sourcesContent":["import React, { createRef } from \"react\";\nimport io from \"socket.io-client\";\n// import \"./App.css\";\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.localVideoRef = createRef();\n    this.remoteVideoRef = createRef();\n    this.textAreaRef = createRef();\n    const config = {\n      iceServers: [\n        // {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls: \"stun:stun.l.google.com:19302\",\n        },\n      ],\n    };\n    this.socket = null;\n    this.state = {\n      pc: new RTCPeerConnection(config),\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"window url:\", window.location.origin);\n    this.socket = io.connect(\"http://localhost:8080\");\n    console.log(\"this.socket\", this.socket);\n\n    this.socket.on(\"success-connection\", (success) => {\n      console.log(success);\n    });\n    // io.connect(\"https://2f9db5b7040c.ngrok.io/webrtcPeer\");\n    console.log(this.state.pc);\n    const { pc } = this.state;\n    pc.onicecandidate = (event) => {\n      if (event.candidate) console.log(JSON.stringify(event.candidate));\n    };\n\n    pc.oniceconnectionstatechange = (event) => console.log(event);\n\n    // pc.onaddstream = (event) => (this.remoteVideoRef.srcObject = event.stream);\n    pc.ontrack = (event) => (this.remoteVideoref.srcObject = event.streams[0]);\n\n    const constraints = { video: true, audio: false };\n\n    const success = (stream) => {\n      this.localVideoRef.srcObject = stream;\n      // pc.addstream(stream);\n      stream.getTracks().forEach((track) => {\n        console.log(track);\n        pc.addTrack(track, stream);\n      });\n    };\n\n    const failure = (e) => {\n      console.log(e);\n    };\n\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(success)\n      .catch(failure);\n  }\n\n  createOffer = () => {\n    const { pc } = this.state;\n    console.log(\"Offer\", pc);\n    pc.createOffer()\n      .then((sdp) => {\n        console.log(JSON.stringify(sdp));\n        pc.setLocalDescription(sdp);\n      })\n      .catch((e) => console.log(e));\n  };\n\n  setRemoteDesc = () => {\n    const { pc } = this.state;\n    const desc = JSON.stringify(this.textAreaRef.value);\n    pc.setRemoteDescription(new RTCSessionDescription(desc));\n  };\n\n  createAnswer = () => {\n    const { pc } = this.state;\n    console.log(\"Answer\");\n    pc.createAnswer()\n      .then((sdp) => {\n        console.log(\"createAnswer sdp\", JSON.stringify(sdp));\n        pc.setLocalDescription(sdp);\n      })\n      .catch((e) => console.log(e));\n  };\n\n  addCandidate = () => {\n    const { pc } = this.state;\n    const candidate = JSON.stringify(this.textAreaRef.value);\n    pc.addIceCandidate(new RTCIceCandidate(candidate));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div\n          style={{ display: \"flex\", flexDirection: \"row\", marginBottom: 10 }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n            <span>Local</span>\n            <video\n              style={{\n                width: 250,\n                height: 250,\n                margin: 5,\n                backgroundColor: \"black\",\n              }}\n              ref={(ref) => (this.localVideoRef = ref)}\n              autoPlay\n            ></video>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n            <span>Remote</span>\n            <video\n              style={{\n                width: 250,\n                height: 250,\n                margin: 5,\n                backgroundColor: \"black\",\n              }}\n              ref={(ref) => (this.remoteVideoRef = ref)}\n              autoPlay\n            ></video>\n          </div>\n        </div>\n        <div\n          style={{\n            width: \"50%\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <button onClick={this.createOffer}>Offer</button>\n          <button onClick={this.createAnswer}>Answer</button>\n          <textarea ref={(ref) => (this.textAreaRef = ref)}></textarea>\n          <button onClick={this.setRemoteDesc}>Set Remote Desc</button>\n          <button onClick={this.addCandidate}>Add Candidate</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}