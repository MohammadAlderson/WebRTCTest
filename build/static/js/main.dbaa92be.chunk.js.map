{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","componentDidMount","socket","io","connect","on","success","console","log","sdp","textref","value","JSON","stringify","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","RTCPeerConnection","urls","onicecandidate","e","sendToPeer","oniceconnectionstatechange","ontrack","remoteVideoref","current","srcObject","streams","navigator","mediaDevices","getUserMedia","video","options","mirror","then","stream","window","localStream","localVideoref","addStream","catch","messageType","payload","emit","socketID","id","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","desc","parse","addCandidate","candidates","forEach","React","createRef","style","width","height","margin","backgroundColor","ref","this","autoPlay","muted","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dbaa92be.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport io from 'socket.io-client'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    this.localVideoref = React.createRef()\n    this.remoteVideoref = React.createRef()\n\n    this.socket = null\n    this.candidates = []\n  }\n\n  componentDidMount = () => {\n\n    //this.socket = io.connect('http://localhost:8080')\n\tthis.socket = io.connect('https://45f88544f453.ngrok.io')\n\t \n\n    this.socket.on('connection-success', success => {\n      console.log(success)\n    })\n\n    this.socket.on('offerOrAnswer', (sdp) => {\n\n      this.textref.value = JSON.stringify(sdp)\n\n      // set sdp as remote description\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    })\n\n    this.socket.on('candidate', (candidate) => {\n      // console.log('From Peer... ', JSON.stringify(candidate))\n      // this.candidates = [...this.candidates, candidate]\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    })\n\n    // const pc_config = null\n\n    const pc_config = {\n      \"iceServers\": [\n        // {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls : 'stun:stun.l.google.com:19302'\n        }\n      ]\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    this.pc = new RTCPeerConnection(pc_config)\n\n    // triggered when a new candidate is returned\n    this.pc.onicecandidate = (e) => {\n      // send the candidates to the remote peer\n      // see addCandidate below to be triggered on the remote peer\n      if (e.candidate) {\n        // console.log(JSON.stringify(e.candidate))\n        this.sendToPeer('candidate', e.candidate)\n      }\n    }\n\n    // triggered when there is a change in connection state\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e)\n    }\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    // this.pc.onaddstream = (e) => {\n    //   this.remoteVideoref.current.srcObject = e.stream\n    // }\n\n    this.pc.ontrack = (e) => {\n      debugger\n      this.remoteVideoref.current.srcObject = e.streams[0]\n    }\n\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n      window.localStream = stream\n      this.localVideoref.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log('getUserMedia Error: ', e)\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      // audio: true,\n      video: true,\n      // video: {\n      //   width: 1280,\n      //   height: 720\n      // },\n      // video: {\n      //   width: { min: 1280 },\n      // }\n      options: {\n        mirror: true,\n      }\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(success)\n      .catch(failure)\n  }\n\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    })\n  }\n\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n\n  createOffer = () => {\n    console.log('Offer')\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToPeer('offerOrAnswer', sdp)\n    })\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n  // creates an SDP answer to an offer received from remote peer\n  createAnswer = () => {\n    console.log('Answer')\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToPeer('offerOrAnswer', sdp)\n    })\n  }\n\n  setRemoteDescription = () => {\n    // retrieve and parse the SDP copied from the remote peer\n    const desc = JSON.parse(this.textref.value)\n\n    // set sdp as remote description\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n  }\n\n  addCandidate = () => {\n    // retrieve and parse the Candidate copied from the remote peer\n    // const candidate = JSON.parse(this.textref.value)\n    // console.log('Adding candidate:', candidate)\n\n    // add the candidate to the peer connection\n    // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n\n    this.candidates.forEach(candidate => {\n      console.log(JSON.stringify(candidate))\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={ this.localVideoref }\n          autoPlay muted>\n        </video>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={ this.remoteVideoref }\n          autoPlay>\n        </video>\n        <br />\n\n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n\n        <br />\n        <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\n\n        {/* <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}